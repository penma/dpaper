#!/usr/bin/env perl
use strict;
use warnings;

use Getopt::Long qw(:config no_ignore_case bundling);
use MIME::Base64;
use IPC::Run qw(run);
use Number::Range;
use PostScript::Simple;

my ($data_fileid, $data_offset, $data_length) = ("stdin", 0);
GetOptions("offset|o=i" => \$data_offset, "fileid|I=s" => \$data_fileid, "length|l=i" => \$data_length) or die;

my $pss = PostScript::Simple->new(papersize => "A4", colour => 1, eps => 0, units => "cm");

$pss->newpage();

$pss->setfont("OCRA", 4);

local $/ = \30;
my $data_line = 0;
my $eps_line = 0;
my @lines_empty;
while (my $chunk = <>) {
	if ($data_line >= 160) {
		warn("Received 160x30 bytes of input data, this is more than will fit on the page");
	}

	# detect and record full-null blocks
	if ($chunk eq "\0" x 30) {
		push(@lines_empty, $data_line);
		$data_line++;
		next;
	}

	# generate barcode
	my $code = sprintf("%02x:%s\n", $data_line, encode_base64($chunk, ""));
	my $eps;
	run [qw(barcode -e code128 -n -E -u cm -g 18x0.3)], \$code, \$eps;

	# include barcode in document
	my $e = PostScript::Simple::EPS->new(source => $eps);
	$e->scale(18/$e->width);
	$e->scale(1, 0.5);
	$pss->importeps($e, 2, 26-(($eps_line+1)/6.5));
	$pss->text(2-0.25, 26+0.03-($eps_line/6.5), sprintf("%02x", $data_line));
	$eps_line++;

	$data_line++;
}

# generate the header
my ($eps, $o);

# length/offset information
my $header_x = 1.25;
foreach my $code (split(/ /, sprintf("LE%x OS%x", $data_length, $data_offset))) {
	run [qw(barcode -e code128 -n -E -u cm -g 4.5x0.75)], \$code, \$eps;
	$o = PostScript::Simple::EPS->new(source => $eps);
	$o->scale(4.5/$o->width);
	$pss->importeps($o, $header_x, 29.7 - 1 - 1.5);
	$header_x += 4.5;
}

# fileid
run [qw(barcode -e code128 -n -E -u cm -g 9x0.75)], \"FI$data_fileid", \$eps;
$o = PostScript::Simple::EPS->new(source => $eps);
$o->scale(9/$o->width);
$pss->importeps($o, $header_x, 29.7 - 1 - 1.5);

# store information about full-null-blocks
my $range = Number::Range->new();
$range->addrange(@lines_empty);
my $code = "DB" . ($range->size() ? scalar($range->range()) : "NONE     ");
run [qw(barcode -e code128 -n -E -u cm -g 18x0.75)], \$code, \$eps;
$o = PostScript::Simple::EPS->new(source => $eps);
$o->scale(18/$o->width);
$pss->importeps($o, 1.25, 29.7 - 1 - 2.5);

# human-readable header
$pss->setfont("OCRA", 10);
$pss->text(1, 29.7 - 1 - 0.25, "PP fid:$data_fileid off:$data_offset rawlen:$data_length");

print $pss->get();

